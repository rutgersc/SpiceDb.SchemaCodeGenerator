using System.Diagnostics;
using System.Reflection;
using System.Text.Json;
using Microsoft.Build.Framework;

namespace SpiceDb.SchemaCodeGenerator;

public class SpiceDbSchemaCodeGeneratorTask : Microsoft.Build.Utilities.Task
{
    internal static class Constants
    {
        static Constants()
        {
            var version = typeof(Constants).Assembly.GetCustomAttributes().OfType<AssemblyInformationalVersionAttribute>().First().InformationalVersion;

            FileHeader = $@"// <auto-generated version=""{version}"" />";
        }

        public static string FileHeader { get; }
    }

    [Required]
    public ITaskItem[] InputFiles { get; set; } = [];

    public override bool Execute()
    {
        static string? Header(FileInfo outputFile)
        {
            using (var stream = outputFile.OpenRead())
            {
                using (var streamReader = new StreamReader(stream))
                {
                    return streamReader.ReadLine();
                }
            }
        }

        foreach (var inputFileTaskItem in this.InputFiles)
        {
            var inputFile = new FileInfo(inputFileTaskItem.ItemSpec);
            var outputJsonFile = new FileInfo($"{inputFileTaskItem.ItemSpec}.json");
            var outputFile = new FileInfo($"{inputFileTaskItem.ItemSpec}.g.cs");
            var shouldCreate =
                !outputFile.Exists
                || inputFile.LastWriteTimeUtc > outputFile.LastWriteTimeUtc
                || !Constants.FileHeader.Equals(Header(outputFile), StringComparison.Ordinal);

            if (!shouldCreate)
            {
                continue;
            }

            try
            {
                var spice2jsonPath = "spice2json";

                var schemaText = File.ReadAllText(inputFile.FullName);
                var schemaJson = GetSchemaJsonText(spice2jsonPath, schemaText);
                File.WriteAllText(outputJsonFile.FullName, schemaJson);

                var schema = JsonSerializer.Deserialize<Schema.Schema>(schemaJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                var generatedCode = SchemaCodeGenerator.GenerateFullSchema(schema!);
                File.WriteAllText(outputFile.FullName, generatedCode);
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
                return false;
            }
        }

        return true;
    }

    public static string GetSchemaJsonText(string spice2JsonPath, string schemaText)
    {
        using var p = new Process();
        p.StartInfo = new ProcessStartInfo(spice2JsonPath)
        {
            Arguments = "-s",
            RedirectStandardInput = true,
            RedirectStandardOutput = true,
            UseShellExecute = false
        };
        p.Start();

        p.StandardInput.Write(schemaText);
        p.StandardInput.Close();
        var jsonText = p.StandardOutput.ReadToEnd();

        p.WaitForExit();

        if (p.ExitCode != 0)
        {
            throw new Exception($"spice2json failed with exit code: {p.ExitCode}");
        }

        return jsonText;
    }
}
